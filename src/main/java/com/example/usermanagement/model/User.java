package com.example.usermanagement.model;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.Data;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;

/**
 * Represents a User entity in the system.
 * This class holds information about a user, including personal details
 * such as name, age, email, and phone number.
 * It is mapped to a MongoDB collection named "users".
 */
@Data
@Document(collection = "users")
public class User {

    /**
     * The unique identifier for the user.
     * This field is automatically generated by MongoDB.
     */
    @Id
    private String id;

    /**
     * The name of the user.
     * This field is required and cannot be blank.
     */
    @NotBlank(message = "Name is required")
    private String name;

    /**
     * The age of the user.
     * This field is required and must be at least 18.
     */
    @Min(value = 18, message = "Age must be at least 18")
    @NotNull(message = "Age is required")
    private Integer age;

    /**
     * The country of the user.
     * This field is required and cannot be blank.
     */
    @NotBlank(message = "Country is required")
    private String country;

    /**
     * The email address of the user.
     * This field is required and must be in a valid email format.
     */
    @Email(message = "Invalid email format")
    @NotBlank(message = "Email is required")
    private String email;

    /**
     * The phone number of the user.
     * This field must consist of exactly 10 digits.
     */
    @Pattern(regexp = "\\d{10}", message = "Phone number must be 10 digits")
    private String phone;

    /**
     * The preferred notification method for the user.
     * The default value is "email".
     */
    private String notificationPreference = "email";

    /**
     * The registration date and time of the user.
     * This field is automatically set to the current date and time when the user is created.
     */
    private LocalDateTime registrationDate = LocalDateTime.now();
}
